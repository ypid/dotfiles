# vim: foldmarker={{{,}}}:foldmethod=marker
#
# SPDX-FileCopyrightText: 2013-2021 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: CC0-1.0

# This config is tested with Tmux 3.1 and 2.8.

# Keyboard mappings {{{

# Use vim mode.
set-option -g mode-keys vi

# Scrolling in Vim and scrolling Tmux history actually works via the mouse, even through SSH :)
set-option -g mouse on

# Remap prefix to Ctrl-s. The cleanup work is handled by tmux-sensible.
set-option -g prefix C-a

# kill K k.
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# Refresh the current client (including the status line).
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# Kill pane with q.
bind q killp

# Move around panes like in Vim.
bind j select-pane -D
bind C-j select-pane -D
bind k select-pane -U
bind C-k select-pane -U
bind l select-pane -R
bind C-l select-pane -R
bind h select-pane -L
bind C-h select-pane -L

# 342 206 221: ↑ (can be entered in Neo2 level 3 with numpad 8)
# Ugly hack: https://superuser.com/questions/517836/tmux-trying-to-bind-utf8-key
# run-shell "tmux bind-key -n -r $(printf '\\342') display 'e2 prefix binding hack' \\; bind-key -r $(printf '\\206') display '86 prefix binding hack' \\; bind-key -r $(printf '\\221') resize-pane -U"
# Did not work

# Can not be used without prefix. I use the arrow keys in Vim to get a previous command for example.
unbind Up
bind Up resize-pane -U
unbind Down
bind Down resize-pane -D
unbind Right
bind Right resize-pane -R
unbind Left
bind Left resize-pane -L

# Use Vim key bindings to copy.
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection

# Switch to last active window window with prefix + c-s.
bind-key s last-window
bind-key C-s last-window

# Open new window with current working directory.
bind-key m new-window -c "#{pane_current_path}"

# Open vertical/horizontal with current working directory.
bind-key '"' split-window -c "#{pane_current_path}"
bind-key "%" split-window -h -c '#{pane_current_path}'

# move x clipboard into tmux paste buffer
bind C-p run "xclip -o | tmux load-buffer -"
# move tmux copy buffer into x clipboard
# bind C-y run "tmux save-buffer - | xclip -i -selection clipboard"
# bind-key C-y save-buffer /tmp/tmux-buffer \; run-shell "cat /tmp/tmux-buffer | xsel --input --clipboard"
# bind y copy-pipe "xclip"

# Tmux inception. Pressing C-a two times forwards one C-a to an inner Tmux instance.
bind C-a send-prefix

# Don’t use C-d. It is eval …
# It happend sometimes to me that I was not in yank mode and then C-d terminated my shell instead.
# Use Neo2 movements.
# Edit: For some reason this unbind does not work. I have used C-d scrolling
# without closing a shell for years.
# unbind C-d
# unbind C-u

# }}}

# Behavior {{{

# More constant to start the index by 1 (like switching tabs with Alt+m, Alt+,).
set-option -g base-index 1
set-option -g pane-base-index 1

set-option -g monitor-activity on
set-option -g renumber-windows on

# The Terminal title is set by ../../scripts/ssh_wrapper instead of Tmux.
# set-option -g set-titles on
# set-option -g set-titles-string "#{pane_path} (tmux)"

# If run as "tmux attach", create a session if one does not already exist.
# Edit: Use `tmux new -As0` as a longer but cleaner solution than having `new-session` in here.
# Edit: I aliased (with a shell function) that long command to `t`.
# Ref: https://unix.stackexchange.com/questions/103898/how-to-start-tmux-with-attach-if-a-session-exists
# new-session

# }}}

set -g status-right '#{prefix_highlight}'
run-shell ~/.local/share/tmux/plugins/tmux-prefix-highlight/prefix_highlight.tmux

source-file ~/.local/share/tmux/plugins/tmux-colors-solarized/tmuxcolors-dark.conf

run-shell ~/.local/share/tmux/plugins/tmux-sensible/sensible.tmux
# I am not convinced that status-keys emacs mode is better. I also use VI mode
# with ZSH. So lets actually test this with tmux.
set-option -g status-keys vi
